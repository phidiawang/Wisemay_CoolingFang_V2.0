/* This is a linker parameter file for the MC9S12ZVML32 */
NAMES END /* CodeWarrior will pass all the needed files to the linker by command line. But here you may add your own files too. */

SEGMENTS  /* Here all RAM/ROM areas of the device are listed. Used in PLACEMENT below. */

/* Register space  */
/*    IO_SEG        = PAGED         0x000000 TO   0x000FFF; intentionally not defined */

/* RAM */
      RAM           = READ_WRITE  0x001000 TO 0x001FFF;

/* EEPROM */
      EEPROM        = READ_ONLY   0x100000 TO 0x1001FF;

/* non-paged FLASHs */
      ROM           = READ_ONLY   0xFF8000 TO 0xFFFDFF;
 /*   VECTORS       = READ_ONLY     0xFFFE00 TO   0xFFFFFF; intentionally not defined: used for VECTOR commands below */
      OSVECTORS     = READ_ONLY     0xFFFE10 TO   0xFFFFFF;   /* OSEK interrupt vectors (use your vector.o) */
END

PLACEMENT /* here all predefined and user segments are placed into the SEGMENTS defined above. */
      _PRESTART,              /* Used in HIWARE format: jump to _Startup at the code start */
      STARTUP,                /* startup data structures */
      ROM_VAR,                /* constant variables */
      STRINGS,                /* string literals */
      VIRTUAL_TABLE_SEGMENT,  /* C++ virtual table segment */
    //.ostext,                /* OSEK */
      NON_BANKED,             /* runtime routines which must not be banked */
      DEFAULT_ROM,
      COPY              INTO  ROM;

    //.stackstart,            /* eventually used for OSEK kernel awareness: Main-Stack Start */
      SSTACK,                 /* allocate stack first to avoid overwriting variables on overflow */
    //.stackend,              /* eventually used for OSEK kernel awareness: Main-Stack End */
      ptuTrigE,
      adcLists,
    DEFAULT_RAM         INTO  RAM;
  
    vector    INTO  OSVECTORS; /* OSEK */
END

ENTRIES /* keep the following unreferenced variables */
    /* OSEK: always allocate the vector table and all dependent objects */
  //_vectab OsBuildNumber _OsOrtiStackStart _OsOrtiStart
  _vectab
END

STACKSIZE 0x500

//VECTOR 0 _Startup /* reset vector: this is the default entry point for a C/C++ application. */
//VECTOR 0 Entry  /* reset vector: this is the default entry point for an Assembly application. */
//INIT Entry      /* for assembly applications: that this is as well the initialization entry point */
//VECTOR 12 TIMchan0_ISR
//VECTOR 15 TIMchan3_ISR
//VECTOR 28 ADC0error_ISR
//VECTOR 30 ADC0done_ISR
//VECTOR 56 ADC1error_ISR
//VECTOR 58 ADC1done_ISR
//VECTOR 70 PTUTrigger0Done_ISR
//VECTOR 71 PTUTrigger1Done_ISR
//VECTOR 75 PMFreloadA_ISR
//VECTOR 78 PMFfault_ISR
//VECTOR 79 PMFreloadoverrun_ISR

